<!-- views/realTimeProducts.handlebars -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Productos en Tiempo Real</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <h1>Productos en Tiempo Real</h1>
    <ul id="productList"></ul>

    <form id="productForm">
        <input type="text" name="title" placeholder="Title" required>
        <input type="text" name="description" placeholder="Description" required>
        <input type="text" name="code" placeholder="Code" required>
        <input type="number" name="price" placeholder="Price" required>
        <input type="number" name="stock" placeholder="Stock" required>
        <input type="text" name="category" placeholder="Category" required>
        <input type="text" name="thumbnails" placeholder="Thumbnails (comma separated)">
        <button type="submit">Add Product</button>
    </form>

    <button id="registerBtn">Register</button>
    <button id="loginBtn">Login</button>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        // Actualizar la lista de productos en tiempo real
        socket.on('products', (products) => {
            const productList = document.getElementById('productList');
            productList.innerHTML = '';
            products.forEach(product => {
                const productItem = document.createElement('li');
                productItem.textContent = `ID: ${product._id}, Title: ${product.title}`;
                productList.appendChild(productItem);
            });
        });

        // Manejar el envÃ­o del formulario
        document.getElementById('productForm').addEventListener('submit', async (event) => {
            event.preventDefault();
            const formData = new FormData(event.target);
            const productData = {};
            formData.forEach((value, key) => {
                productData[key] = value;
            });

            // Enviar el producto al servidor
            const response = await fetch('/api/products', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(productData)
            });

            if (response.ok) {
                event.target.reset();
            } else {
                console.error('Failed to add product');
            }
        });

        document.getElementById('registerBtn').addEventListener('click', () => {
            Swal.fire({
                title: 'Register',
                html:
                    '<input id="swal-username" class="swal2-input" placeholder="Username">' +
                    '<input id="swal-password" type="password" class="swal2-input" placeholder="Password">',
                focusConfirm: false,
                preConfirm: () => {
                    const username = document.getElementById('swal-username').value;
                    const password = document.getElementById('swal-password').value;
                    return { username, password };
                }
            }).then(async (result) => {
                if (result.isConfirmed) {
                    const response = await fetch('/auth/register', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(result.value)
                    });

                    if (response.ok) {
                        Swal.fire('Registered!', 'Your account has been created.', 'success');
                    } else {
                        Swal.fire('Error', 'Failed to register', 'error');
                    }
                }
            });
        });

        document.getElementById('loginBtn').addEventListener('click', () => {
            Swal.fire({
                title: 'Login',
                html:
                    '<input id="swal-username" class="swal2-input" placeholder="Username">' +
                    '<input id="swal-password" type="password" class="swal2-input" placeholder="Password">',
                focusConfirm: false,
                preConfirm: () => {
                    const username = document.getElementById('swal-username').value;
                    const password = document.getElementById('swal-password').value;
                    return { username, password };
                }
            }).then(async (result) => {
                if (result.isConfirmed) {
                    const response = await fetch('/auth/login', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(result.value)
                    });

                    if (response.ok) {
                        Swal.fire('Logged in!', 'You are now logged in.', 'success');
                    } else {
                        Swal.fire('Error', 'Invalid username or password', 'error');
                    }
                }
            });
        });
    </script>
</body>
</html>
